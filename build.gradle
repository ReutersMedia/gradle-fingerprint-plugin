apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

defaultTasks 'clean', 'build'

version = '0.3'
group = 'com.reuters'
ext.archivesBaseName = 'gradle-fingerprint-plugin'
ext.isSnapshot = version.endsWith("-SNAPSHOT")

repositories {
    mavenCentral()
}

repositories {
    mavenCentral()
}

dependencies {
    groovy localGroovy()
    compile gradleApi()
    testCompile 'junit:junit:4.8.2'
}

task sourceJar(type: Jar) {
    description = 'An archive of the source code for Maven Central'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
    description = 'An archive of the GroovyDocs for Maven Central'
    classifier = 'javadoc'
    from groovydoc
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.3'
}

artifacts {
    archives groovydocJar, sourceJar
}

signing {
    sign configurations.archives
}

// Only require signing if we are uploading a non snapshot version
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        required = taskGraph.hasTask(":uploadArchives") && !isSnapshot
    }
}

install.repositories.mavenInstaller {
    pom.project(pomConfiguration)
    if (signing.signatory) {
        beforeDeployment { signing.signPom(it) }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        if (signing.signatory) {
            beforeDeployment { signing.signPom(it) }
        }
        name = 'mavenCentralReleaseDeployer'
        ext.credentials = [userName: mavenCentralUsername,
                           password: mavenCentralPassword]
        println credentials
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            authentication(credentials)
            releases(updatePolicy: 'always')
        }
        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(credentials)
            snapshots(updatePolicy: 'always')
        }
        pom.project(pomConfiguration)
    }
}

/**
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    return {
        name 'Gradle Fingerprint Plugin'
        packaging 'jar'
        description 'A Gradle plugin for assets fingerprinting'
        url 'https://github.com/ReutersMedia/gradle-fingerprint-plugin'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'talgiat'
                name 'Tal Giat'
                email 'talgiat@gmail.com'
            }
        }
        scm {
            connection 'scm:git:git@github.com:ReutersMedia/gradle-fingerprint-plugin.git'
            developerConnection 'scm:git:git@github.com:ReutersMedia/gradle-fingerprint-plugin.git'
            url 'git@github.com:ReutersMedia/gradle-fingerprint-plugin.git'
        }
    }
}